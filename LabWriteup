Binary Trees Lab Writeup

by Renn Jervis

2. a) Identify levels of nodes:
	a - 3
	f - 1
	g - 4
	k - 0
	l - 1
	p - 2
	
	b) The height of the tree is the is the length of the path from the 
	root to a node on the lowest level. An example of the node on the lowest
	level is g, and the length of the path from g to the root is 4. This the 
	height of the tree is 4.

3) **insert final node level func**


4) **insert final height func**

5) Tree A is not balanced. Its height is 4, and it has some leaves at levels
3, 4, and 5. In this case all the leaves do not occur at levels h(4) and h-1(3); 
additionally, some nodes at level 2 
have < 2 children (node 3 has 0 children and node 63 has only one). For the 
tree to be balanced, all leaves must occur at level h or h-1 AND and all of 
level less that h-1 have 2 children. Note that we can see A is not balanced 
immediately because it has a leaf at level h-2.

Likewise, Tree B is also not balanced. The height of this tree is also 4, and we
see that while all leaves do occur at levels h and h-1, there is a single 
problem node on level h-2 (node 'l') which only has one child. Thus, the tree
cannot be balaced. 

6) isbalanced

7) A tree is height balanced if for each node, the height of its subtrees does
not differ by more than one.

Tree C cannot be height-balanced as the right subtree of its root node has 
a height > height of the left subtree + 1. The right subtree of the root, has 
height 1 and the left subtree has height 3. 

Tree D is height balanced because at each node the height of the subtrees 
differs by no more that one. 

8) isheightbalanced

9) A binary search tree is organized such that at a node, all the left children
have a value less than the parent, and all the right children are larger than 
the parent. If we are removing a node, we wish to replace it with a node in 
the tree as close to the removed node's value as possible, so we need not 
rearrange the tree. The node with the value closest to (but smaller than) 
the original will be in the first position of the left
subtree. All of the elements less than our element are contained within this
left subtree, and as we move down the left subtree, the values become smaller, and thus 
farther away from the node we wish to replace. Thus first value in the left subtree 
must be the one of our two options to promote to the position of the removed
node. The right subtree of the node we seek to remove contains all the 
values in the tree which our greater than our node, and as we move down the tree
the values become larger and we move away from our node value. To find the value
closest to our node we take the smallest of these items from the right subtree.